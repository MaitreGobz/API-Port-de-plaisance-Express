openapi: 3.0.3
info:
  title: API Port de plaisance (Express)
  version: 0.2.1
  description: >
    API RESTful pour gérer les catways et leurs réservations,
    ainsi que l'authentification et la gestion des utilisateurs (basique).

servers:
  - url: http://localhost:3000
    description: Local

tags:
  - name: Auth
    description: Authentification (register/login)
  - name: Users
    description: Gestion d'utilisateurs
  - name: Catways
    description: Gestion des catways
  - name: Reservations
    description: Gestion des réservations

paths:
  # Auth
  /auth/register:
    post:
      tags: [Auth]
      summary: Créer un compte utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UserRegisterInput" }
      responses:
        "201":
          description: Utilisateur créé
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserPublic" }
        "409":
          description: Email déjà utilisée
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /auth/login:
    post:
      tags: [Auth]
      summary: Se connecter et obtenir un JWT
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/LoginInput" }
      responses:
        "200":
          description: Token JWT
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
        "401":
          description: Identifiants invalides
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  # User
  /users:
    post:
      tags: [Users]
      summary: Créer un utilisateur (admin)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UserRegisterInput" }
      responses:
        "201":
          description: Utilisateur créé
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserPublic" }
        "409":
          description: Email déjà utilisée
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /users/{id}:
    patch:
      tags: [Users]
      summary: Modifier partiellement un utilisateur
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/Id"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UserPatchInput" }
      responses:
        "200":
          description: Utilisateur mis à jour
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserPublic" }
        "404":
          description: Introuvable
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
    delete:
      tags: [Users]
      summary: Supprimer un utilisateur
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        "204":
          description: Supprimé
        "404":
          description: Introuvable
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  # Catways
  /catways:
    get:
      tags: [Catways]
      summary: Lister tous les catways
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Liste des catways
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Catway" }
    post:
      tags: [Catways]
      summary: Créer un catway
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CatwayCreate" }
      responses:
        "201":
          description: Catway créé
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Catway" }

  /catways/{id}:
    get:
      tags: [Catways]
      summary: Détails d’un catway
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        "200":
          description: Catway
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Catway" }
        "404":
          description: Introuvable
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
    put:
      tags: [Catways]
      summary: Remplacer complètement un catway
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/Id"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CatwayCreate" }
      responses:
        "200":
          description: Catway remplacé
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Catway" }
    patch:
      tags: [Catways]
      summary: Modifier partiellement un catway
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/Id"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/CatwayPatch" }
      responses:
        "200":
          description: Catway mis à jour
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Catway" }
    delete:
      tags: [Catways]
      summary: Supprimer un catway
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/Id"
      responses:
        "204":
          description: Supprimé

  # Réservations
  /catways/reservations:
    get:
      tags: [Reservations]
      summary: Lister toutes les réservations
      description: >
        Retourne toutes les réservations, indépendamment du catway,
        mais la route reste structurée sous /catways pour respecter l'arborescence du projet.
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Liste de toutes les réservations
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Reservation" }

  /catway/{id}/reservations:
    post:
      tags: [Reservations]
      summary: Créer une réservation pour un catway
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: "#/components/parameters/Id"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ReservationCreate" }
      responses:
        "201":
          description: Réservation créée
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Reservation" }
        "409":
          description: Chevauchement de créneau
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /catways/{id}/reservations/{idReservation}:
    parameters:
      - $ref: "#/components/parameters/Id"
      - $ref: "#/components/parameters/ReservationId"
    get:
      tags: [Reservations]
      summary: Détails d’une réservation
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Réservation trouvée
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Reservation" }
        "404":
          description: Introuvable
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }
    delete:
      tags: [Reservations]
      summary: Supprimer une réservation
      security: [{ bearerAuth: [] }]
      responses:
        "204":
          description: Supprimée

# ---------- COMPONENTS ----------
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    Id:
      name: id
      in: path
      required: true
      schema: { type: string, pattern: "^[0-9a-fA-F]{24}$" }
      description: Id MongoDB du catway
    ReservationId:
      name: idReservation
      in: path
      required: true
      schema: { type: string, pattern: "^[0-9a-fA-F]{24}$" }
      description: Id MongoDB de la réservation

  schemas:
    Error:
      type: object
      properties:
        error: { type: string }

    # ---------- USERS / AUTH ----------
    UserPublic:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        email: { type: string, format: email }
      required: [id, name, email]

    UserRegisterInput:
      type: object
      properties:
        name: { type: string }
        email: { type: string, format: email }
        password: { type: string, minLength: 6 }
      required: [name, email, password]

    UserPatchInput:
      type: object
      properties:
        name: { type: string }
        email: { type: string, format: email }
        password: { type: string, minLength: 6 }

    LoginInput:
      type: object
      properties:
        email: { type: string, format: email }
        password: { type: string }
      required: [email, password]

    # ---------- CATWAYS ----------
    Catway:
      type: object
      properties:
        id: { type: string }
        catwayNumber: { type: integer }
        type: { type: string, enum: [long, short] }
        catwayState: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required: [id, catwayNumber, type]

    CatwayCreate:
      type: object
      properties:
        catwayNumber: { type: integer }
        type: { type: string, enum: [long, short] }
        catwayState: { type: string }
      required: [catwayNumber, type]

    CatwayPatch:
      type: object
      properties:
        catwayNumber: { type: integer }
        type: { type: string, enum: [long, short] }
        catwayState: { type: string }

    # ---------- RESERVATIONS ----------
    Reservation:
      type: object
      properties:
        id: { type: string }
        catwayId: { type: string }
        catwayNumber: { type: integer }
        clientName: { type: string }
        boatName: { type: string }
        checkIn: { type: string, format: date-time }
        checkOut: { type: string, format: date-time }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required: [id, catwayNumber, clientName, boatName, checkIn, checkOut]

    ReservationCreate:
      type: object
      properties:
        clientName: { type: string }
        boatName: { type: string }
        checkIn: { type: string, format: date-time }
        checkOut: { type: string, format: date-time }
      required: [clientName, boatName, checkIn, checkOut]

security:
  - bearerAuth: []
